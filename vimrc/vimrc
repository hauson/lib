" set ts=4

set number
set foldenable          
set foldmethod=syntax       
set foldcolumn=0            
setlocal foldlevel=1        
set foldlevelstart=99              
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
                            
" set expandtab
" set cindent

syntax on
set ruler
set nowrap
set autoread
set autowriteall

set t_Co=256
" set cursorline
colorscheme molokai
let g:molokai_original = 1
let g:rehash256 = 1
autocmd InsertLeave,WinEnter * set cursorline 
autocmd InsertEnter,WinLeave * set nocursorline



" try 
let g:winManagerWindowLayout='NERDTree|Tagbar'
let g:winManagerWidth=30
let g:AutoOpenWinManager = 1 

" NerdTree####################################################
" 去除第一行的帮助提示
let NERDTreeMinimalUI=1
" 在左边占多宽
let NERDTreeWinSize=28
let NERDTreeHighlightCursorline=1
let NERDTreeChDirMode = 2
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&b:NERDTreeType == "primary") | q | endif
" autocmd vimenter * NERDTree

" Tagbar######################################################
let g:tagbar_vertical = 25
let g:tagbar_compact = 1
let g:tagbar_autoshowtag = 1
let g:tagbar_autoclose = 1
autocmd VimEnter * wincmd l

let mapleader = ','

" vim-go custom mappings
au FileType go nmap <Leader>s <Plug>(go-implements)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <leader>r <Plug>(go-run-vertical)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test-func)
au FileType go nmap <Leader>e <Plug>(go-rename)
au FileType go nmap <Leader>p <Plug>(go-import)
au FileType go nmap <Leader>d <Plug>(go-def-vertical)
au FileType go nmap <Leader>f :GoFmt<CR>
au FileType go nmap <Leader>ls <Plug>(go-decls)
au FileType go nmap <Leader>ce <Plug>(go-callees)
au FileType go nmap <Leader>cr <Plug>(go-callers)
au FileType go nmap <Leader>cs <Plug>(go-callstack)
au FileType go nmap <Leader>wp <Plug>(go-pointsto)
au FileType go nmap <Leader>we :GoWhicherrs<CR>
au FileType go nmap gi <Plug>(go-doc)<c-w>j


" vim-go settings
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_fields = 1
let g:go_highlight_function_parameters = 1

inoremap kk <Esc>
inoremap jk <Esc>
inoremap jj <Esc>
nnoremap Y y$
nnoremap viwp viw"0p
nnoremap diw "0diw 
nnoremap <Leader>" viw<esc>bi"<esc>ea"<esc>
nnoremap <Leader>' viw<esc>bi'<esc>ea'<esc> 
nnoremap <Leader>` viw<esc>bi`<esc>ea`<esc>
nnoremap <Leader>( viw<esc>bi(<esc>ea)<esc>b
nnoremap <Leader>) viw<esc>bi(<esc>ea)<esc>b

nnoremap n F
vnoremap n F

nmap <c-p> o<Esc>p
nmap gl <S-$>
nmap gh <S-^>
nmap gk [{
nmap gj ]}
nmap gn <S-$>%<S-^>

vmap gl <S-$>
vmap gh <S-^>
vmap gk [{
vmap gj ]}
vmap gn <S-$>%<S-^>

nmap g, ``
nmap g. `.
nmap g^ `^
nmap g[ `[
nmap g] `]
nmap g< `<
nmap g> `>

map <f1> :GoDoc<CR>
map <f2> :GoVet<CR>
" NERDTree
map <f3> :NERDTreeFind<CR>
map <f4> :NERDTreeToggle<CR>
map <f5> :GoRun<CR>
map <f6> :TagbarToggle<CR>
map <f7> :GoInfo<CR>
map <f8> :GoTestFunc<CR>
map <f9> :GoReferrers<CR>
map <f10> :GoImports<CR>
map <f11> :GoLint<CR>
map <f12> :GoSameIdsClear<CR>
map <C-s> :w<CR>
nmap q :q<CR>
nmap t :GoSameIds<CR>

nnoremap <CR> <c-w>f
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <c-k> <c-w>k
nnoremap <c-j> <c-w>j

set autowrite
set nocp
set nocompatible              " be iMproved, required
set backspace=indent,eol,start
filetype off                  " required
set scrolloff=3
" 共享剪贴板
set clipboard+=unnamed

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'fatih/vim-go'
Plugin 'scrooloose/nerdtree'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'michaelHL/awesome-vim-colorschemes'
Plugin 'Tagbar'
Plugin 'Tabular'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'Blackrush/vim-gocode'
Plugin 'Winmanager'
Plugin 'jszakmeister/vim-togglecursor'
Plugin 'AndrewRadev/splitjoin.vim'
call vundle#end()            " required

" let g:UltiSnipsExpandTrigger="<CR>"
" let g:UltiSnipsJumpForwardTrigger="<c-b>"
" let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" let g:UltiSnipsEditSplit="vertical"

" *** Pathogen
"   http://tammersaleh.com/posts/the-modern-vim-config-with-pathogen/
call pathogen#infect()
call pathogen#helptags()

filetype plugin indent on    " required

"  ---------------------------------------
function! g:UltiSnips_Complete()
  call UltiSnips#ExpandSnippet()
  if g:ulti_expand_res == 0
    if pumvisible()
      return "\<C-n>"
    else
      call UltiSnips#JumpForwards()
      if g:ulti_jump_forwards_res == 0
        return "\<TAB>"
      endif
    endif
  endif
  return ""
endfunction

function! g:UltiSnips_Reverse()
  call UltiSnips#JumpBackwards()
  if g:ulti_jump_backwards_res == 0
    return "\<C-P>"
  endif

  return ""
endfunction


if !exists("g:UltiSnipsJumpForwardTrigger")
  let g:UltiSnipsJumpForwardTrigger = "<tab>"
endif
if !exists("g:UltiSnipsJumpBackwardTrigger")
  let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
endif

au InsertEnter * exec "inoremap <silent> " .     g:UltiSnipsExpandTrigger       . " <C-R>=g:UltiSnips_Complete()<cr>"
au InsertEnter * exec "inoremap <silent> " .     g:UltiSnipsJumpBackwardTrigger . " <C-R>=g:UltiSnips_Reverse()<cr>"

:inoremap ) <c-r>=ClosePair(')')<CR>
:inoremap { {<CR>}<ESC>O
:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
:inoremap " ""<ESC>i
:inoremap ' ''<ESC>i
function! ClosePair(char)
    if getline('.')[col('.') - 1] == a:char
		return "\<Right>"
	else
		return a:char
	endif
endfunction

let &colorcolumn=join(range(81,999),",")
let &colorcolumn="80,".join(range(400,999),",")

